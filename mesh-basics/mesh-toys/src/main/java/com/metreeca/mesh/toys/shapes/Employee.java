package com.metreeca.mesh.toys.shapes;

import com.metreeca.mesh.Value;
import com.metreeca.mesh.shapes.Property;
import com.metreeca.mesh.shapes.Shape;
import com.metreeca.mesh.shapes.Type;
import com.metreeca.mesh.toys.EmployeeFrame;

import java.net.URI;

public final class Employee {

    public static final Shape SHAPE=Shape.shape()
            .id("id")
            .type("type")
            .clazz(Type.type("Employee", URI.create("https://data.example.net/#Employee")),
                    Type.type("Resource", URI.create("https://data.example.net/#Resource"))
            )
            .constraints(
                    v -> new com.metreeca.mesh.toys.Employee.Integrity().apply(new EmployeeFrame(v))
            )
            .property(Property.property("label")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("http://www.w3.org/2000/01/rdf-schema#label"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .minLength(5)
                            .maxLength(80)
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("created")
                    .hidden(true)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#created"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Instant())
                            .maxCount(1)
                    )
            )
            .property(Property.property("mutated")
                    .hidden(true)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#mutated"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Instant())
                            .maxCount(1)
                    )
            )
            .property(Property.property("code")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#code"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .pattern("^\\d+$")
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("forename")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#forename"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("surname")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#surname"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("birthdate")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#birthdate"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.LocalDate())
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("title")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#title"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("seniority")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#seniority"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Integral())
                            .minInclusive(Value.integral(1))
                            .maxInclusive(Value.integral(5))
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("email")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#email"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.String())
                            .pattern("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$")
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("active")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#active"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Instant())
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("ytd")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#ytd"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Floating())
                            .minInclusive(Value.floating(0.0e0))
                            .maxCount(1)
                    )
            )
            .property(Property.property("last")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#last"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Floating())
                            .minInclusive(Value.floating(0.0e0))
                            .maxCount(1)
                    )
            )
            .property(Property.property("delta")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#delta"))
                    .reverse(false)
                    .shape(() -> Shape.shape()
                            .datatype(Value.Floating())
                            .maxCount(1)
                    )
            )
            .property(Property.property("office")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#office"))
                    .reverse(false)
                    .shape(() -> com.metreeca.mesh.toys.OfficeFrame.SHAPE
                            .minCount(1)
                            .maxCount(1)
                    )
            )
            .property(Property.property("supervisor")
                    .hidden(false)
                    .foreign(false)
                    .embedded(false)
                    .forward(URI.create("https://data.example.net/#supervisor"))
                    .reverse(false)
                    .shape(() -> com.metreeca.mesh.toys.EmployeeFrame.SHAPE
                            .maxCount(1)
                    )
            )
            .property(Property.property("reports")
                    .hidden(false)
                    .foreign(true)
                    .embedded(false)
                    .forward(false)
                    .reverse(URI.create("https://data.example.net/#supervisor"))
                    .shape(() -> com.metreeca.mesh.toys.EmployeeFrame.SHAPE
                    )
            )
            .property(Property.property("career")
                    .hidden(false)
                    .foreign(false)
                    .embedded(true)
                    .forward(URI.create("https://data.example.net/#career"))
                    .reverse(false)
                    .shape(() -> com.metreeca.mesh.toys.EventFrame.SHAPE
                    )
            );


}
