/*
 * Copyright Â© 2025 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.mesh.meta;

import java.util.*;

import static com.metreeca.mesh.util.Collections.list;

import static java.util.Collections.emptyIterator;
import static java.util.Collections.emptyListIterator;
import static java.util.Spliterators.emptySpliterator;

/**
 * Payload-stashing collection.
 *
 * <p>A stash is empty collections with stashed payloads, inserted in a type-safe way into data transfer objects where a
 * collections are expected, for instance in order to transfer tuples generated by analytical queries over a collection
 * of typed items.</p>
 *
 * @param <T> the type of elements for the expected collection
 */
record Stash<T>(

        Object payload

) implements Set<T>, List<T> {

    @Override
    public boolean isEmpty() {
        return true;
    }

    @Override
    public boolean contains(final Object object) {
        return false;
    }

    @Override
    public boolean containsAll(final Collection<?> collection) {
        return false;
    }


    @Override
    public int size() {
        return 0;
    }

    @Override
    public Spliterator<T> spliterator() {
        return emptySpliterator();
    }

    @Override
    public Iterator<T> iterator() {
        return emptyIterator();
    }

    @Override
    public ListIterator<T> listIterator() {
        return emptyListIterator();
    }

    @Override
    public ListIterator<T> listIterator(final int index) {

        if ( index != 0 ) { throw new IndexOutOfBoundsException(); }

        return emptyListIterator();
    }


    @Override
    public int indexOf(final Object object) {
        return -1;
    }

    @Override
    public int lastIndexOf(final Object object) {
        return -1;
    }

    @Override
    public T get(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<T> subList(final int from, final int to) {

        if ( from != 0 || to != 0 ) { throw new IndexOutOfBoundsException(); }

        return list();
    }


    @Override
    public boolean add(final T t) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean remove(final Object object) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean addAll(final Collection<? extends T> collection) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean retainAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean removeAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException();
    }


    @Override
    public boolean addAll(final int index, final Collection<? extends T> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public T set(final int index, final T element) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void add(final int index, final T element) {
        throw new UnsupportedOperationException();
    }

    @Override
    public T remove(final int index) {
        throw new UnsupportedOperationException();
    }


    @Override
    public Object[] toArray() {
        return list().toArray();
    }

    @Override
    public <V> V[] toArray(final V[] array) {

        if ( array == null ) {
            throw new NullPointerException("null array");
        }

        Arrays.fill(array, null);

        return array;
    }

}
